// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "gsx2.h"

/////////////////////////////////////////////////////////////////////////////
// CGSX2

IMPLEMENT_DYNCREATE(CGSX2, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CGSX2 properties

BOOL CGSX2::GetBatchMode()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetBatchMode(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CGSX2::GetLegendState()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetLegendState(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CGSX2::GetAxisXText()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CGSX2::SetAxisXText(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CGSX2::GetAxisYText()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CGSX2::SetAxisYText(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

long CGSX2::GetAxisColor()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetAxisColor(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

BOOL CGSX2::GetGridState()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetGridState(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

long CGSX2::GetGridColor()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetGridColor(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CGSX2::GetPlotAreaColor()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetPlotAreaColor(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

BOOL CGSX2::GetAxisXLog()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetAxisXLog(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CGSX2::GetAxisYLog()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetAxisYLog(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

CString CGSX2::GetTitleText()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CGSX2::SetTitleText(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

long CGSX2::GetTitleTextColor()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetTitleTextColor(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CGSX2::GetTitleBackgroundColor()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetTitleBackgroundColor(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CGSX2::GetTitleBorder()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetTitleBorder(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CGSX2::GetLegendTextColor()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetLegendTextColor(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CGSX2::GetLegendBackgroundColor()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetLegendBackgroundColor(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

long CGSX2::GetLegendBorder()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetLegendBorder(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

BOOL CGSX2::GetInternalZoom()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetInternalZoom(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

long CGSX2::GetNumberOfSeries()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetNumberOfSeries(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

BOOL CGSX2::GetScrollBar()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetScrollBar(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

BOOL CGSX2::GetAutoScale()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetAutoScale(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

BOOL CGSX2::GetShowActiveGraph()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetShowActiveGraph(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CGSX2::GetActiveGraph()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetActiveGraph(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CGSX2::GetInternalMarker()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetInternalMarker(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

double CGSX2::GetStartMarkerPos()
{
	double result;
	GetProperty(0x19, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetStartMarkerPos(double propVal)
{
	SetProperty(0x19, VT_R8, propVal);
}

double CGSX2::GetEndMarkerPos()
{
	double result;
	GetProperty(0x1a, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetEndMarkerPos(double propVal)
{
	SetProperty(0x1a, VT_R8, propVal);
}

short CGSX2::GetActiveTool()
{
	short result;
	GetProperty(0x1b, VT_I2, (void*)&result);
	return result;
}

void CGSX2::SetActiveTool(short propVal)
{
	SetProperty(0x1b, VT_I2, propVal);
}

short CGSX2::GetSmooth()
{
	short result;
	GetProperty(0x1c, VT_I2, (void*)&result);
	return result;
}

void CGSX2::SetSmooth(short propVal)
{
	SetProperty(0x1c, VT_I2, propVal);
}

double CGSX2::GetAxisXMin()
{
	double result;
	GetProperty(0x1d, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetAxisXMin(double propVal)
{
	SetProperty(0x1d, VT_R8, propVal);
}

double CGSX2::GetAxisXMax()
{
	double result;
	GetProperty(0x1e, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetAxisXMax(double propVal)
{
	SetProperty(0x1e, VT_R8, propVal);
}

double CGSX2::GetAxisYMin()
{
	double result;
	GetProperty(0x1f, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetAxisYMin(double propVal)
{
	SetProperty(0x1f, VT_R8, propVal);
}

double CGSX2::GetAxisYMax()
{
	double result;
	GetProperty(0x20, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetAxisYMax(double propVal)
{
	SetProperty(0x20, VT_R8, propVal);
}

BOOL CGSX2::GetInternalGain()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetInternalGain(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

double CGSX2::GetGainValue()
{
	double result;
	GetProperty(0x22, VT_R8, (void*)&result);
	return result;
}

void CGSX2::SetGainValue(double propVal)
{
	SetProperty(0x22, VT_R8, propVal);
}

long CGSX2::GetChartAreaColor()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetChartAreaColor(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

BOOL CGSX2::GetMarkerHorzLine()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetMarkerHorzLine(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CGSX2::GetHorzLine1State()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetHorzLine1State(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

BOOL CGSX2::GetHorzLine2State()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CGSX2::SetHorzLine2State(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

long CGSX2::GetHorzLine1Color()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetHorzLine1Color(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

long CGSX2::GetHorzLine2Color()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CGSX2::SetHorzLine2Color(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CGSX2 operations

void CGSX2::Size(long Left, long Top, long Right, long Bottom)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Left, Top, Right, Bottom);
}

float CGSX2::GetVersion()
{
	float result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

void CGSX2::CopyToClipboard()
{
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGSX2::ReDraw()
{
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGSX2::SetDefaultAxis()
{
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGSX2::Print(long Left, long Top, long Width, long Height)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Left, Top, Width, Height);
}

BOOL CGSX2::DrawToDC(long Hdc, long Left, long Top, long Width, long Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Hdc, Left, Top, Width, Height);
	return result;
}

void CGSX2::AddLegendText(LPCTSTR Text)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Text);
}

void CGSX2::RemoveLegendText(BOOL bRemoveAll)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bRemoveAll);
}

long CGSX2::GetDataLineColor(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x44, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDataLineColor(long Series, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x44, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, nNewValue);
}

long CGSX2::GetDataLineWidth(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x45, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDataLineWidth(long Series, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x45, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, nNewValue);
}

long CGSX2::GetDataSymbol(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDataSymbol(long Series, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x46, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, nNewValue);
}

long CGSX2::GetDataSymbolSize(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDataSymbolSize(long Series, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x47, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, nNewValue);
}

long CGSX2::GetDataSymbolColor(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDataSymbolColor(long Series, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, nNewValue);
}

void CGSX2::ScaleDataToPixel(double XDataIn, double YDataIn, long* pXPixelOut, long* pYPixelOut)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PI4 VTS_PI4;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 XDataIn, YDataIn, pXPixelOut, pYPixelOut);
}

void CGSX2::ZoomXAxisIn()
{
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGSX2::ZoomXAxisOut()
{
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGSX2::ZoomYAxisIn()
{
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGSX2::ZoomYAxisOut()
{
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CGSX2::ScalePixelToData(long XPixelIn, long YPixelIn, double* pXDataOut, double* pYDataOut)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		XPixelIn, YPixelIn, pXDataOut, pYDataOut);
	return result;
}

long CGSX2::GetDataLine(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDataLine(long Series, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, nNewValue);
}

BOOL CGSX2::ScalePixelToDataIndex(long XPixelIn, long YPixelIn, long Series, long* pPointOut, BOOL bScreenPtsOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_PI4 VTS_BOOL;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		XPixelIn, YPixelIn, Series, pPointOut, bScreenPtsOnly);
	return result;
}

void CGSX2::ZoomYAxisAuto()
{
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CGSX2::GetStartMarkerIndex(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

long CGSX2::GetEndMarkerIndex(long Series)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Series);
	return result;
}

long CGSX2::GetAnalysisFromSelection(long Series, double* pdNetArea, double* pdGrossArea, double* pdCentroid)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Series, pdNetArea, pdGrossArea, pdCentroid);
	return result;
}

double CGSX2::GetYValueFromIndex(long Series, long Index, BOOL bScreenPtsOnly)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Series, Index, bScreenPtsOnly);
	return result;
}

double CGSX2::GetYValueFromXValue(long Series, double XValue)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Series, XValue);
	return result;
}

double CGSX2::GetXValueFromIndex(long Series, long Index, BOOL bScreenPtsOnly)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Series, Index, bScreenPtsOnly);
	return result;
}

BOOL CGSX2::GetDisplaySeries(long Series)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Series);
	return result;
}

void CGSX2::SetDisplaySeries(long Series, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Series, bNewValue);
}

void CGSX2::ClearData(long Series)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Series);
}

BOOL CGSX2::SetDataEx(VARIANT* pvaXData, VARIANT* pvaYData, long lSeries, BOOL bAsync)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_I4 VTS_BOOL;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pvaXData, pvaYData, lSeries, bAsync);
	return result;
}

void CGSX2::HorzLine1(double dDataY, BOOL bDashed, BOOL bBetweenMkr)
{
	static BYTE parms[] =
		VTS_R8 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dDataY, bDashed, bBetweenMkr);
}

void CGSX2::HorzLine2(double dDataY, BOOL bDashed, BOOL bBetweenMkr)
{
	static BYTE parms[] =
		VTS_R8 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dDataY, bDashed, bBetweenMkr);
}

void CGSX2::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
