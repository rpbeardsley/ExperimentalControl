// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CGSX2 wrapper class
#pragma once

class CGSX2 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CGSX2)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xfa911b02, 0x5f7d, 0x11d2, { 0xa0, 0xc0, 0x0, 0x60, 0x8, 0x96, 0x15, 0xc2 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetBatchMode();
	void SetBatchMode(BOOL);
	BOOL GetLegendState();
	void SetLegendState(BOOL);
	CString GetAxisXText();
	void SetAxisXText(LPCTSTR);
	CString GetAxisYText();
	void SetAxisYText(LPCTSTR);
	long GetAxisColor();
	void SetAxisColor(long);
	BOOL GetGridState();
	void SetGridState(BOOL);
	long GetGridColor();
	void SetGridColor(long);
	long GetPlotAreaColor();
	void SetPlotAreaColor(long);
	BOOL GetAxisXLog();
	void SetAxisXLog(BOOL);
	BOOL GetAxisYLog();
	void SetAxisYLog(BOOL);
	CString GetTitleText();
	void SetTitleText(LPCTSTR);
	long GetTitleTextColor();
	void SetTitleTextColor(long);
	long GetTitleBackgroundColor();
	void SetTitleBackgroundColor(long);
	long GetTitleBorder();
	void SetTitleBorder(long);
	long GetLegendTextColor();
	void SetLegendTextColor(long);
	long GetLegendBackgroundColor();
	void SetLegendBackgroundColor(long);
	long GetLegendBorder();
	void SetLegendBorder(long);
	BOOL GetInternalZoom();
	void SetInternalZoom(BOOL);
	long GetNumberOfSeries();
	void SetNumberOfSeries(long);
	BOOL GetScrollBar();
	void SetScrollBar(BOOL);
	BOOL GetAutoScale();
	void SetAutoScale(BOOL);
	BOOL GetShowActiveGraph();
	void SetShowActiveGraph(BOOL);
	BOOL GetActiveGraph();
	void SetActiveGraph(BOOL);
	BOOL GetInternalMarker();
	void SetInternalMarker(BOOL);
	double GetStartMarkerPos();
	void SetStartMarkerPos(double);
	double GetEndMarkerPos();
	void SetEndMarkerPos(double);
	short GetActiveTool();
	void SetActiveTool(short);
	short GetSmooth();
	void SetSmooth(short);
	double GetAxisXMin();
	void SetAxisXMin(double);
	double GetAxisXMax();
	void SetAxisXMax(double);
	double GetAxisYMin();
	void SetAxisYMin(double);
	double GetAxisYMax();
	void SetAxisYMax(double);
	BOOL GetInternalGain();
	void SetInternalGain(BOOL);
	double GetGainValue();
	void SetGainValue(double);
	long GetChartAreaColor();
	void SetChartAreaColor(long);
	BOOL GetMarkerHorzLine();
	void SetMarkerHorzLine(BOOL);
	BOOL GetHorzLine1State();
	void SetHorzLine1State(BOOL);
	BOOL GetHorzLine2State();
	void SetHorzLine2State(BOOL);
	long GetHorzLine1Color();
	void SetHorzLine1Color(long);
	long GetHorzLine2Color();
	void SetHorzLine2Color(long);

// Operations
public:
	void Size(long Left, long Top, long Right, long Bottom);
	float GetVersion();
	void CopyToClipboard();
	void ReDraw();
	void SetDefaultAxis();
	void Print(long Left, long Top, long Width, long Height);
	BOOL DrawToDC(long Hdc, long Left, long Top, long Width, long Height);
	void AddLegendText(LPCTSTR Text);
	void RemoveLegendText(BOOL bRemoveAll);
	long GetDataLineColor(long Series);
	void SetDataLineColor(long Series, long nNewValue);
	long GetDataLineWidth(long Series);
	void SetDataLineWidth(long Series, long nNewValue);
	long GetDataSymbol(long Series);
	void SetDataSymbol(long Series, long nNewValue);
	long GetDataSymbolSize(long Series);
	void SetDataSymbolSize(long Series, long nNewValue);
	long GetDataSymbolColor(long Series);
	void SetDataSymbolColor(long Series, long nNewValue);
	void ScaleDataToPixel(double XDataIn, double YDataIn, long* pXPixelOut, long* pYPixelOut);
	void ZoomXAxisIn();
	void ZoomXAxisOut();
	void ZoomYAxisIn();
	void ZoomYAxisOut();
	BOOL ScalePixelToData(long XPixelIn, long YPixelIn, double* pXDataOut, double* pYDataOut);
	long GetDataLine(long Series);
	void SetDataLine(long Series, long nNewValue);
	BOOL ScalePixelToDataIndex(long XPixelIn, long YPixelIn, long Series, long* pPointOut, BOOL bScreenPtsOnly);
	void ZoomYAxisAuto();
	long GetStartMarkerIndex(long Series);
	long GetEndMarkerIndex(long Series);
	long GetAnalysisFromSelection(long Series, double* pdNetArea, double* pdGrossArea, double* pdCentroid);
	double GetYValueFromIndex(long Series, long Index, BOOL bScreenPtsOnly);
	double GetYValueFromXValue(long Series, double XValue);
	double GetXValueFromIndex(long Series, long Index, BOOL bScreenPtsOnly);
	BOOL GetDisplaySeries(long Series);
	void SetDisplaySeries(long Series, BOOL bNewValue);
	void ClearData(long Series);
	BOOL SetDataEx(VARIANT* pvaXData, VARIANT* pvaYData, long lSeries, BOOL bAsync);
	void HorzLine1(double dDataY, BOOL bDashed, BOOL bBetweenMkr);
	void HorzLine2(double dDataY, BOOL bDashed, BOOL bBetweenMkr);
	void AboutBox();
};
